<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>IIIF Static Choices - Visor 2.5D</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <link href="/css/styles.css" rel="stylesheet">
    <style>
        .export-container {
            background-color: #f8f9fa;
            border-radius: 8px;
            padding: 20px;
            margin-top: 30px;
            border: 1px solid #dee2e6;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="mb-4">Generador de Visor Relighting 2.5D</h1>
        
        <nav class="navbar navbar-expand-lg navbar-light bg-light mb-4">
            <div class="container-fluid">
                <a class="navbar-brand" href="/">IIIF Static Choices</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav">
                        <li class="nav-item">
                            <a class="nav-link active" aria-current="page" href="/">Inicio</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/help">Ayuda</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="https://github.com/bodleian/iiif-static-choices" target="_blank">GitHub</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
        
        <div class="step-indicator">
            <div class="step active">
                <div class="step-number">1</div>
                <div class="step-title">Subir imágenes</div>
            </div>
            <div class="step">
                <div class="step-number">2</div>
                <div class="step-title">Configurar</div>
            </div>
            <div class="step">
                <div class="step-number">3</div>
                <div class="step-title">Generar</div>
            </div>
            <div class="step">
                <div class="step-number">4</div>
                <div class="step-title">Visualizar</div>
            </div>
        </div>
        
        <div class="alert alert-info mb-4">
            <i class="bi bi-info-circle-fill"></i> Esta herramienta te permite crear un visor interactivo 2.5D a partir de imágenes de albedo y mapas de normales. <a href="/help" class="alert-link">Más información</a>
        </div>
        
        <form id="upload-form" enctype="multipart/form-data">
            <div class="row">
                <div class="col-md-6 mb-3">
                    <h3>Imagen Albedo</h3>
                    <div id="albedo-drop" class="drag-drop-area">
                        <i class="bi bi-cloud-upload fs-1 mb-2"></i><br>
                        Arrastra aquí la imagen de albedo o haz clic para seleccionar
                    </div>
                    <input type="file" id="albedo" name="albedo" class="form-control" accept="image/*" style="display: none;">
                    <div id="albedo-preview" class="preview-container"></div>
                </div>
                
                <div class="col-md-6 mb-3">
                    <h3>Mapa de Normales</h3>
                    <div id="normals-drop" class="drag-drop-area">
                        <i class="bi bi-cloud-upload fs-1 mb-2"></i><br>
                        Arrastra aquí el mapa de normales o haz clic para seleccionar
                    </div>
                    <input type="file" id="normals" name="normals" class="form-control" accept="image/*" style="display: none;">
                    <div id="normals-preview" class="preview-container"></div>
                </div>
            </div>
            
            <div class="mb-3">
                <label for="title" class="form-label">Título</label>
                <input type="text" id="title" name="title" class="form-control" required>
            </div>
            
            <div class="mb-3">
                <label for="description" class="form-label">Descripción</label>
                <textarea id="description" name="description" class="form-control"></textarea>
            </div>
            
            <div class="mb-3">
                <label for="shelfmark" class="form-label">Marca de Referencia</label>
                <input type="text" id="shelfmark" name="shelfmark" class="form-control">
            </div>
            
            <div class="mb-3">
                <label for="outputId" class="form-label">ID del Manifiesto</label>
                <input type="text" id="outputId" name="outputId" class="form-control" value="relighting-viewer">
                <small class="text-muted">Este será el nombre del archivo del manifiesto generado</small>
            </div>
            
            <button type="submit" class="btn btn-primary">
                <i class="bi bi-lightning-charge"></i> Generar Visor 2.5D
            </button>
        </form>
        
        <div id="status" class="mt-4"></div>
        
        <div id="viewer-container" class="mt-4" style="display: none;">
            <h3><i class="bi bi-eye"></i> Visor 2.5D</h3>
            <div class="alert alert-success">
                <i class="bi bi-check-circle-fill"></i> ¡El visor se ha generado correctamente!
            </div>
            <div class="mb-3">
                <a id="viewer-link" href="#" target="_blank" class="btn btn-success">
                    <i class="bi bi-box-arrow-up-right"></i> Abrir Visor
                </a>
            </div>
            <div class="mb-3">
                <label for="viewer-url" class="form-label">URL del Visor</label>
                <div class="input-group">
                    <input type="text" id="viewer-url" class="form-control" readonly>
                    <button class="btn btn-outline-secondary" type="button" id="copy-url">
                        <i class="bi bi-clipboard"></i> Copiar
                    </button>
                </div>
            </div>
            
            <!-- Sección para exportar el visor -->
            <div class="export-container">
                <h4><i class="bi bi-box-seam"></i> Exportar Visor</h4>
                <p>Si deseas desplegar este visor en tu propio servidor, puedes exportar todos los archivos necesarios en un paquete ZIP.</p>
                
                <div class="mb-3">
                    <label for="target-url" class="form-label">URL de destino</label>
                    <input type="text" id="target-url" class="form-control" placeholder="https://ejemplo.com/visor/">
                    <small class="form-text text-muted">Introduce la URL base donde se ubicará el visor en tu servidor.</small>
                </div>
                
                <button id="export-button" class="btn btn-primary">
                    <i class="bi bi-download"></i> Exportar Visor
                </button>
                <div id="export-status" class="mt-2"></div>
            </div>
        </div>
        
        <div class="footer mt-5">
            <p>Basado en <a href="https://github.com/bodleian/iiif-static-choices" target="_blank">IIIF Static Choices</a> | Desarrollado para facilitar la creación de visores de relighting 2.5D</p>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Funcionalidad de arrastrar y soltar
            setupDragDrop('albedo');
            setupDragDrop('normals');
            
            // Variable para almacenar el ID del manifiesto generado
            let currentManifestId = '';
            
            // Manejar envío del formulario
            document.getElementById('upload-form').addEventListener('submit', function(e) {
                e.preventDefault();
                
                // Actualizar los indicadores de pasos
                document.querySelectorAll('.step')[0].classList.remove('active');
                document.querySelectorAll('.step')[0].classList.add('completed');
                document.querySelectorAll('.step')[1].classList.remove('active');
                document.querySelectorAll('.step')[1].classList.add('completed');
                document.querySelectorAll('.step')[2].classList.add('active');
                
                const formData = new FormData(this);
                const statusDiv = document.getElementById('status');
                
                statusDiv.innerHTML = '<div class="alert alert-info"><i class="bi bi-hourglass-split"></i> Generando visor, por favor espera...</div>';
                
                fetch('/upload', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Actualizar paso final
                        document.querySelectorAll('.step')[2].classList.remove('active');
                        document.querySelectorAll('.step')[2].classList.add('completed');
                        document.querySelectorAll('.step')[3].classList.add('active');
                        
                        statusDiv.innerHTML = '<div class="alert alert-success"><i class="bi bi-check-circle-fill"></i> ¡El visor se ha generado correctamente!</div>';
                        
                        // Guardar el ID del manifiesto
                        currentManifestId = data.manifestId || document.getElementById('outputId').value;
                        
                        // Mostrar el contenedor del visor
                        const viewerContainer = document.getElementById('viewer-container');
                        viewerContainer.style.display = 'block';
                        
                        // Configurar la URL del visor
                        const viewerLink = document.getElementById('viewer-link');
                        const viewerUrl = document.getElementById('viewer-url');
                        
                        viewerLink.href = data.viewerUrl;
                        viewerUrl.value = data.viewerUrl;
                        
                        // Funcionalidad de copiar URL
                        document.getElementById('copy-url').addEventListener('click', function() {
                            viewerUrl.select();
                            document.execCommand('copy');
                            this.innerHTML = '<i class="bi bi-clipboard-check"></i> Copiado!';
                            setTimeout(() => {
                                this.innerHTML = '<i class="bi bi-clipboard"></i> Copiar';
                            }, 2000);
                        });
                    } else {
                        // Revertir al paso anterior si hay error
                        document.querySelectorAll('.step')[2].classList.remove('active');
                        document.querySelectorAll('.step')[1].classList.remove('completed');
                        document.querySelectorAll('.step')[1].classList.add('active');
                        
                        statusDiv.innerHTML = `<div class="alert alert-danger"><i class="bi bi-exclamation-triangle-fill"></i> Error: ${data.message || 'No se pudo generar el visor'}</div>`;
                    }
                })
                .catch(error => {
                    // Revertir al paso anterior si hay error
                    document.querySelectorAll('.step')[2].classList.remove('active');
                    document.querySelectorAll('.step')[1].classList.remove('completed');
                    document.querySelectorAll('.step')[1].classList.add('active');
                    
                    console.error('Error:', error);
                    statusDiv.innerHTML = `<div class="alert alert-danger"><i class="bi bi-exclamation-triangle-fill"></i> Error: ${error.message}</div>`;
                });
            });
            
            // Manejar la exportación del visor
            document.addEventListener('click', function(e) {
                if (e.target && e.target.id === 'export-button') {
                    const targetUrl = document.getElementById('target-url').value.trim();
                    const exportStatus = document.getElementById('export-status');
                    
                    if (!targetUrl) {
                        exportStatus.innerHTML = '<div class="alert alert-warning"><i class="bi bi-exclamation-triangle-fill"></i> Por favor, introduce una URL de destino válida.</div>';
                        return;
                    }
                    
                    if (!currentManifestId) {
                        currentManifestId = document.getElementById('outputId').value;
                    }
                    
                    exportStatus.innerHTML = '<div class="alert alert-info"><i class="bi bi-hourglass-split"></i> Generando paquete de exportación, por favor espera...</div>';
                    
                    // Realizar la solicitud de exportación
                    fetch('/export', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            manifestId: currentManifestId,
                            targetUrl: targetUrl
                        })
                    })
                    .then(response => {
                        if (response.ok) {
                            // Descargar el archivo ZIP
                            const contentDisposition = response.headers.get('content-disposition');
                            let filename = 'visor-exportado.zip';
                            if (contentDisposition) {
                                const filenameMatch = contentDisposition.match(/filename="?([^"]*)"?/);
                                if (filenameMatch && filenameMatch[1]) {
                                    filename = filenameMatch[1];
                                }
                            }
                            
                            return response.blob().then(blob => {
                                const url = window.URL.createObjectURL(blob);
                                const a = document.createElement('a');
                                a.style.display = 'none';
                                a.href = url;
                                a.download = filename;
                                document.body.appendChild(a);
                                a.click();
                                window.URL.revokeObjectURL(url);
                                
                                exportStatus.innerHTML = '<div class="alert alert-success"><i class="bi bi-check-circle-fill"></i> ¡Exportación completada! El archivo ZIP se ha descargado.</div>';
                            });
                        } else {
                            return response.json().then(data => {
                                throw new Error(data.message || 'Error en la exportación');
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        exportStatus.innerHTML = `<div class="alert alert-danger"><i class="bi bi-exclamation-triangle-fill"></i> Error: ${error.message}</div>`;
                    });
                }
            });
        });
        
        function setupDragDrop(fieldName) {
            const dropArea = document.getElementById(`${fieldName}-drop`);
            const fileInput = document.getElementById(fieldName);
            const previewContainer = document.getElementById(`${fieldName}-preview`);
            
            // Abrir el selector de archivos al hacer clic en el área de arrastrar y soltar
            dropArea.addEventListener('click', () => {
                fileInput.click();
            });
            
            // Manejo de eventos de arrastre
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                dropArea.addEventListener(eventName, preventDefaults, false);
            });
            
            function preventDefaults(e) {
                e.preventDefault();
                e.stopPropagation();
            }
            
            ['dragenter', 'dragover'].forEach(eventName => {
                dropArea.addEventListener(eventName, () => {
                    dropArea.classList.add('drag-over');
                }, false);
            });
            
            ['dragleave', 'drop'].forEach(eventName => {
                dropArea.addEventListener(eventName, () => {
                    dropArea.classList.remove('drag-over');
                }, false);
            });
            
            // Manejar la caída del archivo
            dropArea.addEventListener('drop', e => {
                const dt = e.dataTransfer;
                const files = dt.files;
                
                if (files.length > 0) {
                    fileInput.files = files;
                    handleFiles(files);
                    
                    // Activar paso 2 si ambos archivos están cargados
                    if (document.getElementById('albedo').files.length > 0 &&
                        document.getElementById('normals').files.length > 0) {
                        document.querySelectorAll('.step')[0].classList.remove('active');
                        document.querySelectorAll('.step')[0].classList.add('completed');
                        document.querySelectorAll('.step')[1].classList.add('active');
                    }
                }
            });
            
            // Manejar el cambio del input de archivo
            fileInput.addEventListener('change', () => {
                if (fileInput.files.length > 0) {
                    handleFiles(fileInput.files);
                    
                    // Activar paso 2 si ambos archivos están cargados
                    if (document.getElementById('albedo').files.length > 0 &&
                        document.getElementById('normals').files.length > 0) {
                        document.querySelectorAll('.step')[0].classList.remove('active');
                        document.querySelectorAll('.step')[0].classList.add('completed');
                        document.querySelectorAll('.step')[1].classList.add('active');
                    }
                }
            });
            
            // Función para manejar los archivos
            function handleFiles(files) {
                if (files.length > 0) {
                    const file = files[0];
                    
                    // Verificar que sea una imagen
                    if (!file.type.match('image.*')) {
                        previewContainer.innerHTML = '<p class="error-message">Por favor, selecciona un archivo de imagen.</p>';
                        return;
                    }
                    
                    // Mostrar vista previa
                    const reader = new FileReader();
                    reader.onload = e => {
                        previewContainer.innerHTML = `
                            <img src="${e.target.result}" alt="${file.name}" class="preview-image">
                            <p>${file.name} (${formatFileSize(file.size)})</p>
                        `;
                    };
                    reader.readAsDataURL(file);
                }
            }
            
            function formatFileSize(bytes) {
                if (bytes === 0) return '0 Bytes';
                const k = 1024;
                const sizes = ['Bytes', 'KB', 'MB', 'GB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
            }
        }
    </script>
</body>
</html>